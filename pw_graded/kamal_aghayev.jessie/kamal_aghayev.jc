# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 max3(int32 a, int32 b, int32 c)
behavior default:
  assigns \nothing;
  ensures (_C_4 : ((_C_5 : (\result >= \at(a,Old))) &&
                    ((_C_7 : (\result >= \at(b,Old))) &&
                      ((_C_9 : (\result >= \at(c,Old))) &&
                        (_C_10 : (((\result == \at(a,Old)) ||
                                    (\result == \at(b,Old))) ||
                                   (\result == \at(c,Old))))))));
{  
   (var int32 __retres);
   
   {  (if (a >= b) then (if (a >= c) then 
                        {  (_C_1 : (__retres = a));
                           
                           (goto return_label)
                        } else ()) else ());
      (if (b >= b) then (if (b >= c) then 
                        {  (_C_2 : (__retres = b));
                           
                           (goto return_label)
                        } else ()) else ());
      (_C_3 : (__retres = c));
      (return_label : 
      (return __retres))
   }
}

unit double_(intP[..] t, int32 n_0)
  requires (_C_29 : ((_C_30 : (0 < n_0)) && (_C_31 : (n_0 <= 100000000))));
  requires (_C_26 : ((_C_27 : (\offset_min(t) <= 0)) &&
                      (_C_28 : (\offset_max(t) >= (n_0 - 1)))));
behavior default:
  ensures (_C_25 : (\forall int32 i;
                     (((0 <= i) && (i < \at(n_0,Old))) ==>
                       ((\at(t,Old) + i).intM == (2 * i)))));
{  
   (var int32 i);
   
   {  (_C_11 : (i = 0));
      
      loop 
      behavior default:
        invariant (_C_14 : ((_C_15 : (0 <= i)) && (_C_16 : (i <= n_0))));
      behavior default:
        invariant (_C_13 : (\forall int32 j;
                             (((0 <= j) && (j < i)) ==>
                               ((t + j).intM == (2 * j)))));
      variant (_C_12 : (n_0 - i));
      while (true)
      {  
         {  (if (i < n_0) then () else 
            (goto while_0_break));
            
            {  (_C_21 : ((_C_20 : (_C_19 : (t + i)).intM) = (_C_18 : (
                                                            (_C_17 : 
                                                            (2 * i)) :> int32))))
            };
            (_C_24 : (i = (_C_23 : ((_C_22 : (i + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}

int32 increasing(intP[..] arr_0, int32 n_1)
  requires (_C_53 : ((_C_54 : (\offset_min(arr_0) <= 0)) &&
                      (_C_55 : (\offset_max(arr_0) >= (n_1 - 1)))));
  requires (_C_52 : (n_1 > 0));
behavior default:
  assigns \nothing;
  ensures (_C_49 : true);
behavior true_:
  assumes (\forall int32 i_1;
            (((1 <= i_1) && (i_1 < n_1)) ==>
              ((arr_0 + i_1).intM > (arr_0 + (i_1 - 1)).intM)));
  ensures (_C_50 : (\result == 1));
behavior false_:
  assumes (\exists int32 i_0;
            (((1 <= i_0) && (i_0 < n_1)) &&
              ((arr_0 + i_0).intM <= (arr_0 + (i_0 - 1)).intM)));
  ensures (_C_51 : (\result == 0));
{  
   (var int32 i_0);
   
   (var int32 __retres_0);
   
   {  
      {  (_C_32 : (i_0 = 1));
         
         loop 
         behavior default:
           invariant (_C_35 : ((_C_36 : (1 <= i_0)) &&
                                (_C_37 : (i_0 <= n_1))));
         behavior default:
           invariant (_C_34 : (\forall int32 j_0;
                                (((1 <= j_0) && (j_0 < i_0)) ==>
                                  ((arr_0 + j_0).intM >
                                    (arr_0 + (j_0 - 1)).intM))));
         variant (_C_33 : (n_1 - i_0));
         while (true)
         {  
            {  (if (i_0 < n_1) then () else 
               (goto while_0_break));
               
               {  (if ((_C_44 : (_C_43 : (arr_0 + i_0)).intM) <=
                        (_C_42 : (_C_41 : (arr_0 +
                                            (_C_40 : ((_C_39 : (i_0 - 1)) :> int32)))).intM)) then 
                  {  (_C_38 : (__retres_0 = 0));
                     
                     (goto return_label)
                  } else ())
               };
               (_C_47 : (i_0 = (_C_46 : ((_C_45 : (i_0 + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (_C_48 : (__retres_0 = 1));
      (return_label : 
      (return __retres_0))
   }
}

int32 decreasing(intP[..] arr, int32 n)
  requires (_C_77 : ((_C_78 : (\offset_min(arr) <= 0)) &&
                      (_C_79 : (\offset_max(arr) >= (n - 1)))));
  requires (_C_76 : (n > 0));
behavior default:
  assigns \nothing;
  ensures (_C_73 : true);
behavior true_:
  assumes (\forall int32 i_3;
            (((1 <= i_3) && (i_3 < n)) ==>
              ((arr + i_3).intM < (arr + (i_3 - 1)).intM)));
  ensures (_C_74 : (\result == 1));
behavior false_:
  assumes (\exists int32 i_2;
            (((1 <= i_2) && (i_2 < n)) &&
              ((arr + i_2).intM >= (arr + (i_2 - 1)).intM)));
  ensures (_C_75 : (\result == 0));
{  
   (var int32 i_1);
   
   (var int32 __retres_1);
   
   {  
      {  (_C_56 : (i_1 = 1));
         
         loop 
         behavior default:
           invariant (_C_59 : ((_C_60 : (1 <= i_1)) && (_C_61 : (i_1 <= n))));
         behavior default:
           invariant (_C_58 : (\forall int32 j_1;
                                (((1 <= j_1) && (j_1 < i_1)) ==>
                                  ((arr + j_1).intM < (arr + (j_1 - 1)).intM))));
         variant (_C_57 : (n - i_1));
         while (true)
         {  
            {  (if (i_1 < n) then () else 
               (goto while_0_break));
               
               {  (if ((_C_68 : (_C_67 : (arr + i_1)).intM) >=
                        (_C_66 : (_C_65 : (arr +
                                            (_C_64 : ((_C_63 : (i_1 - 1)) :> int32)))).intM)) then 
                  {  (_C_62 : (__retres_1 = 0));
                     
                     (goto return_label)
                  } else ())
               };
               (_C_71 : (i_1 = (_C_70 : ((_C_69 : (i_1 + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (_C_72 : (__retres_1 = 1));
      (return_label : 
      (return __retres_1))
   }
}

int32 monotomic(intP[..] arr_1, int32 n_2)
  requires (_C_92 : ((_C_93 : (\offset_min(arr_1) <= 0)) &&
                      (_C_94 : (\offset_max(arr_1) >= (n_2 - 1)))));
  requires (_C_91 : (n_2 > 0));
behavior default:
  assigns \nothing;
  ensures (_C_87 : true);
behavior increaing:
  assumes (\forall int32 i_7;
            (((1 <= i_7) && (i_7 < n_2)) ==>
              ((arr_1 + i_7).intM > (arr_1 + (i_7 - 1)).intM)));
  ensures (_C_88 : (\result == 1));
behavior decreasing:
  assumes (\forall int32 i_6;
            (((1 <= i_6) && (i_6 < n_2)) ==>
              ((arr_1 + i_6).intM < (arr_1 + (i_6 - 1)).intM)));
  ensures (_C_89 : (\result == (- 1)));
behavior none:
  assumes ((\exists int32 i_4;
             (((1 <= i_4) && (i_4 < n_2)) &&
               ((arr_1 + i_4).intM <= (arr_1 + (i_4 - 1)).intM))) &&
            (\exists int32 i_5;
              (((1 <= i_5) && (i_5 < n_2)) &&
                ((arr_1 + i_5).intM >= (arr_1 + (i_5 - 1)).intM))));
  ensures (_C_90 : (\result == 0));
{  
   (var int32 tmp);
   
   (var int32 tmp_0);
   
   (var int32 __retres_2);
   
   {  (_C_81 : (tmp = (_C_80 : increasing(arr_1, n_2))));
      (if (tmp != 0) then 
      {  (_C_82 : (__retres_2 = 1));
         
         (goto return_label)
      } else ());
      (_C_84 : (tmp_0 = (_C_83 : decreasing(arr_1, n_2))));
      (if (tmp_0 != 0) then 
      {  (_C_85 : (__retres_2 = -1));
         
         (goto return_label)
      } else ());
      (_C_86 : (__retres_2 = 0));
      (return_label : 
      (return __retres_2))
   }
}
