# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

unit copy(intP[..] s, intP[..] t, int32 n)
  requires (_C_20 : ((_C_21 : (\offset_min(t) <= 0)) &&
                      (_C_22 : (\offset_max(t) >= (n - 1)))));
  requires (_C_17 : ((_C_18 : (\offset_min(s) <= 0)) &&
                      (_C_19 : (\offset_max(s) >= (n - 1)))));
  requires (_C_16 : (n > 0));
behavior default:
  ensures (_C_15 : (\forall int32 i;
                     (((0 <= i) && (i < \at(n,Old))) ==>
                       ((\at(t,Old) + i).intM == (\at(s,Old) + i).intM))));
{  
   (var int32 i);
   
   {  (_C_1 : (i = 0));
      
      loop 
      behavior default:
        invariant (_C_4 : ((_C_5 : (0 <= i)) && (_C_6 : (i <= n))));
      behavior default:
        invariant (_C_3 : (\forall int32 j;
                            (((0 <= j) && (j < i)) ==>
                              ((t + j).intM == (s + j).intM))));
      variant (_C_2 : (n - i));
      while (true)
      {  
         {  (if (i < n) then () else 
            (goto while_0_break));
            
            {  (_C_11 : ((_C_10 : (_C_9 : (t + i)).intM) = (_C_8 : (_C_7 : 
                                                                   (s +
                                                                    i)).intM)))
            };
            (_C_14 : (i = (_C_13 : ((_C_12 : (i + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
