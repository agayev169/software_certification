# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 all_zeros(intP[..] t, int32 n)
  requires (_C_20 : (n > 0));
  requires (_C_17 : ((_C_18 : (\offset_min(t) <= 0)) &&
                      (_C_19 : (\offset_max(t) >= (n - 1)))));
behavior default:
  assigns \nothing;
  ensures (_C_14 : true);
behavior true_:
  assumes (\forall int32 i_0;
            (((0 <= i_0) && (i_0 < n)) ==> ((t + i_0).intM == 0)));
  ensures (_C_15 : (\result == 1));
behavior false_:
  assumes (\exists int32 i;
            (((0 <= i) && (i < n)) && ((t + i).intM != 0)));
  ensures (_C_16 : (\result == 0));
{  
   (var int32 i);
   
   (var int32 __retres);
   
   {  
      {  (_C_1 : (i = 0));
         
         loop 
         behavior default:
           invariant (_C_4 : ((_C_5 : (0 <= i)) && (_C_6 : (i <= n))));
         behavior default:
           invariant (_C_3 : (\forall int32 j;
                               (((0 <= j) && (j < i)) ==>
                                 ((t + j).intM == 0))));
         variant (_C_2 : (n - i));
         while (true)
         {  
            {  (if (i < n) then () else 
               (goto while_0_break));
               
               {  (if ((_C_9 : (_C_8 : (t + i)).intM) != 0) then 
                  {  (_C_7 : (__retres = 0));
                     
                     (goto return_label)
                  } else ())
               };
               (_C_12 : (i = (_C_11 : ((_C_10 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (_C_13 : (__retres = 1));
      (return_label : 
      (return __retres))
   }
}
