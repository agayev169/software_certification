# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

unit swap(intP[..] p, intP[..] q)
  requires (_C_31 : ((_C_32 : (\offset_min(p) <= 0)) &&
                      (_C_33 : (\offset_max(p) >= 0))));
  requires (_C_28 : ((_C_29 : (\offset_min(q) <= 0)) &&
                      (_C_30 : (\offset_max(q) >= 0))));
  requires (_C_25 : ((_C_26 : ((- 1000) <= p.intM)) &&
                      (_C_27 : (p.intM <= 10000))));
  requires (_C_22 : ((_C_23 : ((- 1000) <= q.intM)) &&
                      (_C_24 : (q.intM <= 10000))));
behavior default:
  ensures (_C_19 : ((_C_20 : (\at(p,Old).intM == \at(q.intM,Old))) &&
                     (_C_21 : (\at(q,Old).intM == \at(p.intM,Old)))));
{  
   {  (_C_6 : ((_C_5 : p.intM) = (_C_4 : ((_C_3 : ((_C_2 : p.intM) +
                                                    (_C_1 : q.intM))) :> int32))));
      (_C_12 : ((_C_11 : q.intM) = (_C_10 : ((_C_9 : ((_C_8 : p.intM) -
                                                       (_C_7 : q.intM))) :> int32))));
      (_C_18 : ((_C_17 : p.intM) = (_C_16 : ((_C_15 : ((_C_14 : p.intM) -
                                                        (_C_13 : q.intM))) :> int32))));
      
      (return ())
   }
}
