# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 compare_arrays(intP[..] a, intP[..] b, int32 n)
  requires (_C_31 : (n > 0));
  requires (_C_28 : ((_C_29 : (\offset_min(a) <= 0)) &&
                      (_C_30 : (\offset_max(a) >= (n - 1)))));
  requires (_C_25 : ((_C_26 : (\offset_min(b) <= 0)) &&
                      (_C_27 : (\offset_max(b) >= (n - 1)))));
behavior default:
  assigns \nothing;
  ensures (_C_16 : true);
behavior true_:
  assumes (\forall int32 i_1;
            (((0 <= i_1) && (i_1 < n)) ==>
              ((a + i_1).intM == (b + i_1).intM)));
  ensures (_C_17 : (\result == \at(n,Old)));
behavior false_:
  assumes (\exists int32 i;
            (((0 <= i) && (i < n)) && ((a + i).intM != (b + i).intM)));
  ensures (_C_18 : ((((_C_21 : (0 <= \result)) &&
                       (_C_22 : (\result < \at(n,Old)))) &&
                      (_C_23 : ((\at(a,Old) + \result).intM !=
                                 (\at(b,Old) + \result).intM))) &&
                     (_C_24 : (\forall int32 i_0;
                                (((0 <= i_0) && (i_0 < \result)) ==>
                                  ((\at(a,Old) + i_0).intM ==
                                    (\at(b,Old) + i_0).intM))))));
{  
   (var int32 i);
   
   (var int32 __retres);
   
   {  
      {  (_C_1 : (i = 0));
         
         loop 
         behavior default:
           invariant (_C_4 : ((_C_5 : (0 <= i)) && (_C_6 : (i <= n))));
         behavior default:
           invariant (_C_3 : (\forall int32 j;
                               (((0 <= j) && (j < i)) ==>
                                 ((a + j).intM == (b + j).intM))));
         variant (_C_2 : (n - i));
         while (true)
         {  
            {  (if (i < n) then () else 
               (goto while_0_break));
               
               {  (if ((_C_11 : (_C_10 : (a + i)).intM) !=
                        (_C_9 : (_C_8 : (b + i)).intM)) then 
                  {  (_C_7 : (__retres = i));
                     
                     (goto return_label)
                  } else ())
               };
               (_C_14 : (i = (_C_13 : ((_C_12 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (_C_15 : (__retres = n));
      (return_label : 
      (return __retres))
   }
}
