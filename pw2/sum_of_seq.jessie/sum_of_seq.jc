# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 sum_n(int32 n)
  requires (_C_15 : ((_C_16 : (0 <= n)) && (_C_17 : (n <= 1000))));
behavior default:
  assigns \nothing;
  ensures (_C_14 : ((2 * \result) == (\at(n,Old) * (\at(n,Old) + 1))));
{  
   (var int32 res);
   
   (var int32 i);
   
   {  (_C_1 : (res = 0));
      
      {  (_C_2 : (i = 0));
         
         loop 
         behavior default:
           invariant (_C_5 : ((_C_6 : (0 <= i)) && (_C_7 : (i <= (n + 1)))));
         behavior default:
           invariant (_C_4 : ((2 * res) == (i * (i - 1))));
         variant (_C_3 : ((n - i) + 1));
         while (true)
         {  
            {  (if (i <= n) then () else 
               (goto while_0_break));
               
               {  (_C_10 : (res = (_C_9 : ((_C_8 : (res + i)) :> int32))))
               };
               (_C_13 : (i = (_C_12 : ((_C_11 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return res)
   }
}
