# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

int32 mult(int32 x, int32 y)
  requires (_C_18 : ((_C_19 : ((- 10000) <= x)) && (_C_20 : (x <= 10000))));
  requires (_C_15 : ((_C_16 : (0 <= y)) && (_C_17 : (y <= 10000))));
behavior default:
  ensures (_C_14 : (\result == (\at(x,Old) * \at(y,Old))));
{  
   (var int32 res);
   
   (var int32 i);
   
   {  (_C_1 : (res = 0));
      
      {  (_C_2 : (i = 0));
         
         loop 
         behavior default:
           invariant (_C_5 : ((_C_6 : (0 <= i)) && (_C_7 : (i <= y))));
         behavior default:
           invariant (_C_4 : (res == (i * x)));
         variant (_C_3 : (y - i));
         while (true)
         {  
            {  (if (i < y) then () else 
               (goto while_0_break));
               
               {  (_C_10 : (res = (_C_9 : ((_C_8 : (res + x)) :> int32))))
               };
               (_C_13 : (i = (_C_12 : ((_C_11 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return res)
   }
}
