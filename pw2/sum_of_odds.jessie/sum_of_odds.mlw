theory Jessie_model

use import int.Int

use bool.Bool

use import jessie_why3theories.Jessie_memory_model

type charP

type int32

type int8

type padding

type voidP

function charP_tag  : (tag_id charP)

axiom charP_int "charP_int": ((int_of_tag charP_tag) = (1))

function charP_of_pointer_address (pointer ()) : (pointer charP)

axiom charP_of_pointer_address_of_pointer_addr "charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer charP).
  (p = (charP_of_pointer_address (pointer_address p))))

axiom charP_parenttag_bottom "charP_parenttag_bottom":
 (parenttag charP_tag bottom_tag)

axiom charP_tags "charP_tags":
 (forall x:(pointer charP).
  (forall charP_tag_table:(tag_table charP).
   (instanceof charP_tag_table x charP_tag)))

function integer_of_int32 int32 : int

predicate eq_int32(x:int32) (y:int32) =
 ((integer_of_int32 x) = (integer_of_int32 y))

function integer_of_int8 int8 : int

predicate eq_int8(x:int8) (y:int8) =
 ((integer_of_int8 x) = (integer_of_int8 y))

function int32_of_integer int : int32

axiom int32_coerce "int32_coerce":
 (forall x:int.
  (((Int.(<=) (-2147483648) x) /\ (Int.(<=) x (2147483647))) ->
   ((integer_of_int32 (int32_of_integer x)) = x)))

axiom int32_extensionality "int32_extensionality":
 (forall x:int32.
  (forall y:int32[((integer_of_int32 x) = (integer_of_int32 y))].
   (((integer_of_int32 x) = (integer_of_int32 y)) -> (x = y))))

axiom int32_range "int32_range":
 (forall x:int32.
  ((Int.(<=) (-2147483648) (integer_of_int32 x))
  /\ (Int.(<=) (integer_of_int32 x) (2147483647))))

function int8_of_integer int : int8

axiom int8_coerce "int8_coerce":
 (forall x:int.
  (((Int.(<=) (-128) x) /\ (Int.(<=) x (127))) ->
   ((integer_of_int8 (int8_of_integer x)) = x)))

axiom int8_extensionality "int8_extensionality":
 (forall x:int8.
  (forall y:int8[((integer_of_int8 x) = (integer_of_int8 y))].
   (((integer_of_int8 x) = (integer_of_int8 y)) -> (x = y))))

axiom int8_range "int8_range":
 (forall x:int8.
  ((Int.(<=) (-128) (integer_of_int8 x))
  /\ (Int.(<=) (integer_of_int8 x) (127))))

predicate left_valid_struct_charP(p:(pointer charP)) (a:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_min charP_alloc_table p) <= a)

predicate left_valid_struct_voidP(p:(pointer voidP)) (a:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_min voidP_alloc_table p) <= a)

axiom pointer_addr_of_charP_of_pointer_address "pointer_addr_of_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (charP_of_pointer_address p))))

function voidP_of_pointer_address (pointer ()) : (pointer voidP)

axiom pointer_addr_of_voidP_of_pointer_address "pointer_addr_of_voidP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (voidP_of_pointer_address p))))

predicate right_valid_struct_charP(p:(pointer charP)) (b:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_max charP_alloc_table p) >= b)

predicate right_valid_struct_voidP(p:(pointer voidP)) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_max voidP_alloc_table p) >= b)

predicate strict_valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate strict_valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

predicate valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

function voidP_tag  : (tag_id voidP)

axiom voidP_int "voidP_int": ((int_of_tag voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr "voidP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer voidP).
  (p = (voidP_of_pointer_address (pointer_address p))))

axiom voidP_parenttag_bottom "voidP_parenttag_bottom":
 (parenttag voidP_tag bottom_tag)

axiom voidP_tags "voidP_tags":
 (forall x:(pointer voidP).
  (forall voidP_tag_table:(tag_table voidP).
   (instanceof voidP_tag_table x voidP_tag)))

end

module Jessie_program

use import int.Int

use bool.Bool

use import jessie_why3theories.Jessie_memory_model

use import Jessie_model

use import ref.Ref

use import jessie_why3.JessieDivision

use import jessie_why3.Jessie_memory_model_parameters

exception Goto_while_0_break_exc ()

exception Loop_continue_exc ()

exception Loop_exit_exc ()

exception Return_label_exc ()

val charP_alloc_table : ref (alloc_table charP)

val charP_tag_table : ref (tag_table charP)

val alloc_struct_charP
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { true } writes { charP_alloc_table, charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val alloc_struct_charP_requires
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { (Int.(>=) n (0)) } writes { charP_alloc_table,
    charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val voidP_alloc_table : ref (alloc_table voidP)

val voidP_tag_table : ref (tag_table voidP)

val alloc_struct_voidP
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val alloc_struct_voidP_requires
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { (Int.(>=) n (0)) } writes { voidP_alloc_table,
    voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val any_int32 (_anonymous:()) : int32 requires { true }  ensures { true }

val any_int8 (_anonymous:()) : int8 requires { true }  ensures { true }

val int32_of_integer_
 (x:int) : int32
  requires { ((Int.(<=) (-2147483648) x) /\ (Int.(<=) x (2147483647))) }
   ensures { ((integer_of_int32 result) = x) }

val int8_of_integer_
 (x:int) : int8
  requires { ((Int.(<=) (-128) x) /\ (Int.(<=) x (127))) }
   ensures { ((integer_of_int8 result) = x) }

val safe_int32_of_integer_
 (x:int) : int32
  requires { true }  ensures { ((integer_of_int32 result) = x) }

val safe_int8_of_integer_
 (x:int) : int8 requires { true }  ensures { ((integer_of_int8 result) = x) }

val sum_n_odds
 (n:int32) : int32
  requires { true }
   ensures { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 3 12 28#
             ((integer_of_int32 result) = (Int.(*) (integer_of_int32 n)
                                          (integer_of_int32 n)))) }

val sum_n_odds_requires
 (n:int32) : int32
  requires { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 13 27#
             ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 13 19#
              (Int.(<=) (0) (integer_of_int32 n)))
             /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 18 27#
                (Int.(<=) (integer_of_int32 n) (1000))))) }
   ensures { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 3 12 28#
             ((integer_of_int32 result) = (Int.(*) (integer_of_int32 n)
                                          (integer_of_int32 n)))) }

let sum_n_odds_ensures_default "W:diverges:N" "expl:Function sum_n_odds, default behavior"
 #"/home/agayev169/software_certification/pw2/sum_of_odds.c" 6 0 10#=
 fun (n : int32) ->
  requires { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 13 27#
             ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 13 19#
              (Int.(<=) (0) (integer_of_int32 n)))
             /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 18 27#
                (Int.(<=) (integer_of_int32 n) (1000)))))  }
  ensures { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 3 12 28#
            ((integer_of_int32 result) = (Int.(*) (integer_of_int32 n)
                                         (integer_of_int32 n)))) } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let res = ref (any_int32 ()) in
     (let i = ref (any_int32 ()) in
     begin
       (let _jessie_14 = (res := (safe_int32_of_integer_ (0))) in ());
      try
       begin
         (let _jessie_16 = (i := (safe_int32_of_integer_ (0))) in ());
        ('Loop_2: 
        begin
          loop
          invariant
            { ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 10 23 35#
               ((integer_of_int32 !res) = (Int.(*) (integer_of_int32 !i)
                                          (integer_of_int32 !i))))
              /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 9 23 34#
                 ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 9 23 29#
                  (Int.(<=) (0) (integer_of_int32 !i)))
                 /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 9 28 34#
                    (Int.(<=) (integer_of_int32 !i) (integer_of_int32 n)))))) }
            
           begin
             any () requires { true }  ensures { true } ;
            try
             begin
               (let _jessie_20 =
               begin
                 (if (Int.(<) (integer_of_int32 !i) (integer_of_int32 n))
                 then () else (raise (Goto_while_0_break_exc ())));
                (let _jessie_18 =
                begin
                  (res := (safe_int32_of_integer_ (Int.(+) (integer_of_int32 !res) 
                                                   (integer_of_int32 
                                                    (safe_int32_of_integer_ 
                                                     (Int.(+) (integer_of_int32 
                                                               (safe_int32_of_integer_ 
                                                                (Int.(*) (2) 
                                                                 (integer_of_int32 !i)))) (1)))))));
                 !res end in ());
                (i := (safe_int32_of_integer_ (Int.(+) (integer_of_int32 !i) (1))));
                !i end in ()); (raise (Loop_continue_exc ())) end with
             Loop_continue_exc _jessie_3 -> () end end end;
         (raise (Goto_while_0_break_exc ())) end) end with
       Goto_while_0_break_exc _jessie_1 -> ('While_0_break:  ()) end;
      (return := !res); (raise Return) end)); absurd  end with Return ->
   !return end)) 

let sum_n_odds_safety "expl:Function sum_n_odds, Safety"
 #"/home/agayev169/software_certification/pw2/sum_of_odds.c" 6 0 10#=
 fun (n : int32) ->
  requires { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 13 27#
             ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 13 19#
              (Int.(<=) (0) (integer_of_int32 n)))
             /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 2 18 27#
                (Int.(<=) (integer_of_int32 n) (1000)))))  } ensures { true } 
  ('Init: 
  (let return = ref (any_int32 ()) in
  try
   begin
     (let res = ref (any_int32 ()) in
     (let i = ref (any_int32 ()) in
     begin
       (let _jessie_5 = (res := (safe_int32_of_integer_ (0))) in ());
      try
       begin
         (let _jessie_7 = (i := (safe_int32_of_integer_ (0))) in ());
        ('Loop_1: 
        begin
          loop
          invariant
            { (#"/home/agayev169/software_certification/pw2/sum_of_odds.jessie/sum_of_odds.jc" 42 9 1005#
              true) }
            variant { (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 11 21 26# 
              (Int.(-) (integer_of_int32 n) (integer_of_int32 !i))) }
           begin
             any ()
             requires { true } reads { i, res } 
              ensures { ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 10 23 35#
                         ((integer_of_int32 !res) = (Int.(*)
                                                    (integer_of_int32 !i)
                                                    (integer_of_int32 !i))))
                        /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 9 23 34#
                           ((#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 9 23 29#
                            (Int.(<=) (0) (integer_of_int32 !i)))
                           /\ (#"/home/agayev169/software_certification/pw2/sum_of_odds.c" 9 28 34#
                              (Int.(<=) (integer_of_int32 !i)
                              (integer_of_int32 n)))))) } ;
            try
             begin
               (let _jessie_11 =
               begin
                 (if (Int.(<) (integer_of_int32 !i) (integer_of_int32 n))
                 then () else (raise (Goto_while_0_break_exc ())));
                (let _jessie_9 =
                begin
                  (res := ("expl:arithmetic overflow"
                          #"/home/agayev169/software_certification/pw2/sum_of_odds.c" 14 8 26#
                          (int32_of_integer_ (Int.(+) (integer_of_int32 !res) 
                                              (integer_of_int32 ("expl:arithmetic overflow"
                                                                #"/home/agayev169/software_certification/pw2/sum_of_odds.c" 14 15 26#
                                                                (int32_of_integer_ 
                                                                 (Int.(+) 
                                                                   (integer_of_int32 
                                                                    ("expl:arithmetic overflow"
                                                                    #"/home/agayev169/software_certification/pw2/sum_of_odds.c" 14 16 21#
                                                                    (int32_of_integer_ 
                                                                    (Int.(*) (2) 
                                                                    (integer_of_int32 !i))))) (1)))))))));
                 !res end in ());
                (i := ("expl:arithmetic overflow"
                      #"/home/agayev169/software_certification/pw2/sum_of_odds.c" 13 27 30#
                      (int32_of_integer_ (Int.(+) (integer_of_int32 !i) (1)))));
                !i end in ()); (raise (Loop_continue_exc ())) end with
             Loop_continue_exc _jessie_3 -> () end end end;
         (raise (Goto_while_0_break_exc ())) end) end with
       Goto_while_0_break_exc _jessie_1 -> ('While_0_break:  ()) end;
      (return := !res); (raise Return) end)); absurd  end with Return ->
   !return end)) 

end


